import './index.scss'
import React, { useEffect, useState } from "react"
import { Map, Markers, InfoWindow } from 'react-amap'
import { Input, message } from 'antd'
import { map } from '@/constants/constant'

const amapkey = map.base.key
const defaultZoom = map.zoom.default

let placeSearch = null
function initPlaceSearch () {
  window.AMap.plugin(["AMap.PlaceSearch"], function () {
    placeSearch = new window.AMap.PlaceSearch({
      pageSize: 5, // 单页显示结果条数
      pageIndex: 1, // 页码
      //city: "010", // 兴趣点城市
      //citylimit: true,  //是否强制限制在设置的城市内搜索
      //map: map, // 展现结果的地图实例
      //panel: "panel", // 结果列表将在此容器中进行展示。
      //autoFitView: true // 是否自动调整地图视野使绘制的 Marker点都处于视口的可见范围
    })
  })
}



const AMap = () => {
  const [positionCenter, setPositionCenter] = useState()
  const [zoom, setZoom] = useState(defaultZoom)
  const [markerArr, setMarkerArr] = useState([])
  const [markersInstance, setMarkersInstance] = useState([])
  const [mapInstance, setMapInstance] = useState(null)
  const [currentMarker, setCurrentMarker] = useState(null)
  const [poiId, setPoiId] = useState(null)
  const [windowInfoPosition, setWindowInfoPosition] = useState()
  const [windowInfoVisible, setWindowInfoVisible] = useState(false)
  const [windowInfoContent, setWindowInfoContent] = useState('')
  const offset = [-30, -30]
  const setInfo = (json) => {
    if (json.type === 'marker') {
      setMarkerArr(json.data)
    } else if (json.type === 'clickSearchItem') {
      console.log(json)
      setPositionCenter([json.data.data.location.lng, json.data.data.location.lat])
    } else if (json.type === 'setPoi') {
      setPoiId(json.data)
    }
  }
  //markers 事件
  const markerEvents = {
    created: (markers) => {
      if (markers) {
        setMarkersInstance(markers)
      }
    },
    click: (d, marker) => {
      console.log('click', marker)
      const extData = marker.w.extData
      //获取当前marker实例并渲染
      if (currentMarker) currentMarker.render(renderMarker)
      marker.render(renderActiveMarker)
      setCurrentMarker(marker)
      const location = d.lnglat
      //设置中心点
      //setPositionCenter([location.lng, location.lat])
      setZoom(20)
      //设置地点关键信息
      if (!poiId || poiId.id !== extData.id) {
        setPoiId({ id: extData.id, index: extData.index })
      }
      showInfo(location)
    },
    mouseover: (e, marker) => {
      marker.render(renderHoverMarker)
    },
    mouseout: (e, marker) => {
      if (!currentMarker || marker.w.extData.index !== currentMarker.w.extData.index) {
        marker.render(renderMarker)
      }
    }
  }


  function randomPosition () {
    const position = {
      position: {
        longitude: 120 + Math.random() * 20,
        latitude: 30 + Math.random() * 20,
      }
    }
    setWindowInfoPosition(position)
    setWindowInfoContent('地点:' + position.position.longitude + ',' + position.position.latitude)
    setWindowInfoPosition({ position: { longitude: 30, latitude: 120 } })
  }

  const showInfo = (location) => {
    //获取信息
    placeSearch.getDetails(poiId.id, function (status, result) {
      console.log(result)
      if (status === 'complete' && result.info === 'OK') {
        if (result.poiList && result.poiList.pois && result.poiList.pois.length > 0) {
          createContent(result.poiList.pois[0], location)
        }
      }
    })
  }

  const createContent = (poi, location) => {
    var s = []
    s.push("<b>名称：" + poi.name + "</b>")
    s.push("地址：" + poi.address)
    s.push("电话：" + poi.tel)
    s.push("类型：" + poi.type)
    s.push("地点" + location.lng + ',' + location.lat)
    console.log(location)
    setWindowInfoVisible(true)
    setWindowInfoContent(s.join(''))
    setWindowInfoPosition({ position: { longitude: 30, latitude: 120 } })
  }

  //map地图事件
  const mapEvents = {
    created: (mapinstance) => {
      setMapInstance(mapinstance)
      initPlaceSearch()
    }
  }

  const renderMarker = (d) => {
    return (
      <div className={'amap-icon amap-icon-marker marker-' + d.index} >
      </div>
    )
  }

  const renderHoverMarker = (d) => {
    return (
      <div className={'amap-icon amap-icon-marker hover-marker-' + d.index} >
      </div>
    )
  }

  const renderActiveMarker = (d) => {
    return (
      <div className={'amap-icon amap-icon-marker active-marker-' + d.index} >
      </div>
    )
  }

  useEffect(() => {//生成marker后 居中
    if (mapInstance) {
      if (!markerArr || markerArr.length === 0) { return }
      mapInstance.setFitView(null, false, [150, 60, 100, 60])
    }
  }, [markerArr])// eslint-disable-line

  useEffect(() => {
    if (!poiId) {
      setCurrentMarker(null)
      return
    }
    //触发maker的click事件
    if (markersInstance != null && markersInstance.length > 0) {
      const markerInstance = markersInstance.filter(mi => mi.w.extData.id === poiId.id)[0]
      markerInstance.nf.click[0].yb({ type: 'click', target: markerInstance.nf.click[0].cf, lnglat: markerInstance.De.position })
    }
  }, [poiId])// eslint-disable-line

  return (
    <>
      <button onClick={() => randomPosition}>设置</button>
      <Map amapkey={amapkey} center={positionCenter} zoom={zoom} events={mapEvents} >
        <InfoWindow position={windowInfoPosition}
          visible={windowInfoVisible}
          isCustom={true}
          content={windowInfoContent}
          offset={offset}
        />
        <MapSearchInput className='mapToolBar' poiId={poiId} f_setInfo={setInfo}></MapSearchInput>
        <Markers markers={markerArr} events={markerEvents} render={renderMarker}></Markers>

      </Map>
    </>
  )
}

const MapSearchInput = (props) => {
  const { f_setInfo, poiId, __map__ } = props//, __ele__, __map__
  const [result, setResult] = useState([])
  const map = __map__

  const onSearch = (word, event) => {
    if (!placeSearch) {
      message.error('组件还在加载中!')
      return
    }
    //关键字查询
    placeSearch.search(word, (status, result) => {
      if (status === 'complete') {
        const positions = result.poiList.pois.map((x, i) => {
          return {
            'id': x.id,
            'index': i,
            'icon': '//a.amap.com/jsapi_demos/static/demo-center/icons/poi-marker-' + (i + 1) + '.png',
            'position': //[x.location.lng, x.location.lat]
            {
              'longitude': x.location.lng,
              'latitude': x.location.lat
            },
            'address': x.address,
            'title': x.name
          }
        })
        f_setInfo({ type: 'marker', data: positions })
      }
      console.log(result)
      f_setInfo({ type: 'setPoi', data: null })
      setResult(result.poiList.pois)
    })
  }
  const searchItemClickHandle = (id, index) => {
    f_setInfo({ type: 'setPoi', data: { id: id, index: index } })
  }
  const getItemClass = (id, idx) => {
    if (poiId && id === poiId.id) {
      return 'active-marker-' + idx
    }
    return 'marker-' + idx
  }

  return (
    <div className='searchDiv'>
      <Input.Search className='searchInput' placeholder="搜索位置" onSearch={onSearch} enterButton />
      <div id='panel'>
        {result.map((item, i) => <div className='searchListItem' key={item.id} onClick={() => { searchItemClickHandle(item.id, i) }}>
          <span className={'map-icon ' + getItemClass(item.id, i)}></span>
          <div className='poiInfo'>
            <div className='title'>{item.name}</div>
            <div className='address'>{item.address}</div>
          </div>
        </div>)}
      </div>
    </div>
  )
}


export { AMap, MapSearchInput }